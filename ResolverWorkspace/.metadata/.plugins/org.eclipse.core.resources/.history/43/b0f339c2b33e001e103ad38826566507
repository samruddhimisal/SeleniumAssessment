package Utils;

import java.time.Duration;
import java.util.List;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;
import org.testng.Assert;
import org.testng.Reporter;

import TestBase.TestSetup;

public class Utilities extends TestSetup
{
	static WebElement emailIdElement, passwordElement, signInButtonElement;
	String actualValidationMsg, emailInputsString,passwordInputsString; 
	String[] emailInputsArr=null,passwordInputsArr=null;		
	int emailArrlen, passwordArrlen;
	
	public static void scrollToAForm(WebElement element) throws Throwable
	{
		Thread.sleep(2000);
		((JavascriptExecutor)driver).executeScript("arguments[0].scrollIntoView();", element);
		
		//Verify that the Form Header for the test is visible
		verifyHeaderVisibility(element);
		
	}
	
	//Function to verify the Form Header visibility
		public static void verifyHeaderVisibility(WebElement element)
		{					
			softAssert.assertEquals(true, element.isDisplayed(), element.getText()+" form header is not visible.");
		}
		
	//Function to navigate to the home Page
		public static void navigateToHome()
		{
			//Verify that the 'Home' hyperlink is visible and then Navigate to the Home page			
			WebElement homePage = driver.findElement(By.xpath(prop.getProperty("link_homePage")));
			try
			{
				Assert.assertEquals(true, homePage.isDisplayed());
				Reporter.log("Home Page is visible.");
			}
			catch(Throwable t)
			{
				Reporter.log("Home Page is not visible.");
			}
			homePage.click();
		}
	
		//	Test1
		//	Keyword -- Verify the visibility of sample login form fields
		public static void verifyLoginForm()
		{
			WebElement emailId,password,signInButton;
			emailId = driver.findElement(By.xpath(prop.getProperty("ip_emailAddress")));
			password = driver.findElement(By.xpath(prop.getProperty("ip_password"))); 
			signInButton = driver.findElement(By.xpath(prop.getProperty("btn_signIn")));
				
			//Verify that the email address field is visible and insert the user entered value
			softAssert.assertEquals(true, emailId.isDisplayed(),"Email Id textbox is not displayed."); 
			softAssert.assertEquals(true, password.isDisplayed(),"Password textbox is not displayed.");
			softAssert.assertEquals(true, signInButton.isDisplayed(),"Sign in button is not displayed.");
		}
		//Keyword -- Verify the login credentials combinations with valid input
		//UseCase: Input - "sam@gmail.com", Output - Should accept input on button click, clear the input fields
		public static void verifyForValidCredentials()
		{
			
			emailIdElement = driver.findElement(By.xpath(prop.getProperty("ip_emailAddress")));
			passwordElement = driver.findElement(By.xpath(prop.getProperty("ip_password"))); 
			signInButtonElement = driver.findElement(By.xpath(prop.getProperty("btn_signIn")));
						
			emailIdElement.sendKeys(prop.getProperty("T1_validEmailId"));
			passwordElement.sendKeys(prop.getProperty("T1_validPasswordValue"));
			signInButtonElement.click();
			//reinstantiate elements because DOM id changes
			emailIdElement = driver.findElement(By.xpath(prop.getProperty("ip_emailAddress")));
			passwordElement = driver.findElement(By.xpath(prop.getProperty("ip_password"))); 
			String actualEmailPlaceholder = emailIdElement.getAttribute("placeholder");	
			String actualPasswordPlaceholder = passwordElement.getAttribute("placeholder");
			softAssert.assertEquals(actualEmailPlaceholder, prop.getProperty("T1_emailPlaceholder"),"Placeholder value not matching. Please check if the email id is invalid.");
			softAssert.assertEquals(actualPasswordPlaceholder, prop.getProperty("T1_passwordPlaceholder"),"Placeholder value not matching. Please check if the email id is invalid.");
			
		}
		
		//Keyword -- Verify the login credentials combinations with invalid input
		/*
		 * UseCase1: Input - Empty/No credentials, Output - message: "Please fill out this field."
		 * UseCase2: Input - Empty email id value, Output - message: "Please fill out this field."
		 * UseCase3: Input - Empty password value, Output - message: "Please fill out this field."
		 */
			public static void verifyForEmptyEmailPassword()
			{
				
				emailIdElement = driver.findElement(By.xpath(prop.getProperty("ip_emailAddress")));
				passwordElement = driver.findElement(By.xpath(prop.getProperty("ip_password"))); 
				signInButtonElement = driver.findElement(By.xpath(prop.getProperty("btn_signIn")));
							
				emailIdElement.sendKeys(prop.getProperty("T1_validEmailId"));
				passwordElement.sendKeys(prop.getProperty("T1_validPasswordValue"));
				signInButtonElement.click();
				//reinstantiate elements because DOM id changes
				emailIdElement = driver.findElement(By.xpath(prop.getProperty("ip_emailAddress")));
				passwordElement = driver.findElement(By.xpath(prop.getProperty("ip_password"))); 
				String actualEmailPlaceholder = emailIdElement.getAttribute("placeholder");	
				String actualPasswordPlaceholder = passwordElement.getAttribute("placeholder");
				softAssert.assertEquals(actualEmailPlaceholder, prop.getProperty("T1_emailPlaceholder"),"Placeholder value not matching. Please check if the email id is invalid.");
				softAssert.assertEquals(actualPasswordPlaceholder, prop.getProperty("T1_passwordPlaceholder"),"Placeholder value not matching. Please check if the email id is invalid.");
				
			}


	
	// Test 3
	public static void verifyDefaultSelectedValue()
	{
		WebElement btn_LOV = driver.findElement(By.xpath(prop.getProperty("btn_LOV")));
		
		if(btn_LOV.isDisplayed() && btn_LOV.isEnabled())
		{
			String actualLOVvalue = driver.findElement(By.xpath(prop.getProperty("btn_LOV"))).getText();
			softAssert.assertEquals(actualLOVvalue, prop.getProperty("T3_lovOption1"), "The default value in LOV doesn't match with expected value.");	
		}
		else
		{
			System.out.println("LOV button is not visible");
		}
	}
	
	public static void selectOptionFromLOV(String option)
	{
		WebElement btn_LOV = driver.findElement(By.xpath(prop.getProperty("btn_LOV")));
		if(btn_LOV.isDisplayed() && btn_LOV.isEnabled())
		{
			btn_LOV.click();
			//create a list of the shown values in the drop-down
			List<WebElement> list = driver.findElements(By.xpath(prop.getProperty("link_LOV")));
			
			//loop through the list to find "Option 3". If found, break the loop.
			for(WebElement elem : list){
				if(option.equals(elem.getText())){
					elem.click();
					break;
				}
			}
			//fetch the newly selected value
			btn_LOV = driver.findElement(By.xpath(prop.getProperty("btn_LOV")));
			//check if the newly selected value is correct
			softAssert.assertEquals(btn_LOV, option,"Expected value is not selected.");
		}
		
	}
	
	
	//Test 6
	//method to find the value of the cell at coordinates 2, 2
	public static String findCellValue(int rowCoordinate, int colCoordinate)
	{
		WebElement table = driver.findElement(By.xpath(prop.getProperty("tb_table")));
		List<WebElement> rowsList = table.findElements(By.xpath(prop.getProperty("tbl_bodyRows")));
		List<WebElement> columnsList = null;
		int rowCount = 0, colCount = 0;
               
		for (WebElement row : rowsList)
        {            	   
             columnsList = row.findElements(By.tagName("td"));
                 
             for (WebElement column : columnsList) 
             {
              	if(rowCoordinate == rowCount && colCoordinate == colCount)
              	{
                 	return column.getText();
                 }
                           	
                    colCount++;
              }
                   rowCount++;
                   colCount = 0;
         }
         return null;      
	}

	
}
